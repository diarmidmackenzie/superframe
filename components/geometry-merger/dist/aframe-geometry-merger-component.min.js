!function(r){function e(o){if(t[o])return t[o].exports;var n=t[o]={exports:{},id:o,loaded:!1};return r[o].call(n.exports,n,n.exports,e),n.loaded=!0,n.exports}var t={};return e.m=r,e.c=t,e.p="",e(0)}([function(r,e,t){THREE.BufferGeometryUtils||t(1),AFRAME.utils.setBufferGeometryColor=function(){const r=new THREE.Color;return function(e,t,o,n){void 0===o&&(o=0),void 0===n&&(n=1/0);var i;const a=e.getAttribute("color"),u=a.itemSize,s=a.array;r.set(t);const f=Math.min(n,a.count)*u;for(i=o*u;i<=f;i+=u)s[i]=r.r,s[i+1]=r.g,s[i+2]=r.b;a.needsUpdate=!0}}(),AFRAME.registerComponent("geometry-merger",{schema:{preserveOriginal:{default:!1}},init:function(){var r=[];this.vertexIndex={};var e=this,t=0;this.el.object3D.updateMatrixWorld(),this.el.object3D.traverse(function(o){if("Mesh"===o.type&&o.el!==e.el){for(var n=o.geometry.clone(),i=o;i!==e.el.object3D;)n.applyMatrix4(i.parent.matrix),i=i.parent;r.push(n),meshPositions=o.geometry.getAttribute("position"),e.vertexIndex[o.parent.uuid]=[t,t+meshPositions.count-1],t+=meshPositions.count,e.data.preserveOriginal||o.parent.remove(o)}}),this.geometry=THREE.BufferGeometryUtils.mergeBufferGeometries(r),this.mesh=new THREE.Mesh(this.geometry),this.el.setObject3D("mesh",this.mesh),r.length=0},getColor:function(r,e){const t=this.geometry.getAttribute("color");return e.fromBufferAttribute(t,this.vertexIndex[r][0]),e},setColor:function(r,e){const t=this.vertexIndex[r];AFRAME.utils.setBufferGeometryColor(this.geometry,e,t[0],t[1])}})},function(r,e){THREE.BufferGeometryUtils={computeTangents:function(r){function e(r,e,t){v.fromArray(a,3*r),h.fromArray(a,3*e),y.fromArray(a,3*t),E.fromArray(s,2*r),g.fromArray(s,2*e),p.fromArray(s,2*t);var o=h.x-v.x,n=y.x-v.x,i=h.y-v.y,u=y.y-v.y,f=h.z-v.z,l=y.z-v.z,d=g.x-E.x,x=p.x-E.x,R=g.y-E.y,T=p.y-E.y,w=1/(d*T-x*R);b.set((T*o-R*n)*w,(T*i-R*u)*w,(T*f-R*l)*w),A.set((d*n-x*o)*w,(d*u-x*i)*w,(d*l-x*f)*w),c[r].add(b),c[e].add(b),c[t].add(b),m[r].add(A),m[e].add(A),m[t].add(A)}function t(r){j.fromArray(u,3*r),C.copy(j),z=c[r],M.copy(z),M.sub(j.multiplyScalar(j.dot(z))).normalize(),U.crossVectors(C,z),G=U.dot(m[r]),D=G<0?-1:1,l[4*r]=M.x,l[4*r+1]=M.y,l[4*r+2]=M.z,l[4*r+3]=D}var o=r.index,n=r.attributes;if(null===o||void 0===n.position||void 0===n.normal||void 0===n.uv)return void console.warn("THREE.BufferGeometry: Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()");var i=o.array,a=n.position.array,u=n.normal.array,s=n.uv.array,f=a.length/3;void 0===n.tangent&&r.addAttribute("tangent",new THREE.BufferAttribute(new Float32Array(4*f),4));for(var l=n.tangent.array,c=[],m=[],d=0;d<f;d++)c[d]=new THREE.Vector3,m[d]=new THREE.Vector3;var v=new THREE.Vector3,h=new THREE.Vector3,y=new THREE.Vector3,E=new THREE.Vector2,g=new THREE.Vector2,p=new THREE.Vector2,b=new THREE.Vector3,A=new THREE.Vector3,x=r.groups;0===x.length&&(x=[{start:0,count:i.length}]);for(var d=0,R=x.length;d<R;++d)for(var T=x[d],w=T.start,H=T.count,B=w,V=w+H;B<V;B+=3)e(i[B+0],i[B+1],i[B+2]);for(var D,z,G,M=new THREE.Vector3,U=new THREE.Vector3,j=new THREE.Vector3,C=new THREE.Vector3,d=0,R=x.length;d<R;++d)for(var T=x[d],w=T.start,H=T.count,B=w,V=w+H;B<V;B+=3)t(i[B+0]),t(i[B+1]),t(i[B+2])},mergeBufferGeometries:function(r,e){for(var t=null!==r[0].index,o=new Set(Object.keys(r[0].attributes)),n=new Set(Object.keys(r[0].morphAttributes)),i={},a={},u=new THREE.BufferGeometry,s=0,f=0;f<r.length;++f){var l=r[f];if(t!==(null!==l.index))return null;for(var c in l.attributes){if(!o.has(c))return null;void 0===i[c]&&(i[c]=[]),i[c].push(l.attributes[c])}for(var c in l.morphAttributes){if(!n.has(c))return null;void 0===a[c]&&(a[c]=[]),a[c].push(l.morphAttributes[c])}if(u.userData&&(u.userData.mergedUserData=u.userData.mergedUserData||[],u.userData.mergedUserData.push(l.userData)),e){var m;if(t)m=l.index.count;else{if(void 0===l.attributes.position)return null;m=l.attributes.position.count}u.addGroup(s,m,f),s+=m}}if(t){for(var d=0,v=[],f=0;f<r.length;++f){for(var h=r[f].index,y=0;y<h.count;++y)v.push(h.getX(y)+d);d+=r[f].attributes.position.count}u.setIndex(v)}for(var c in i){var E=this.mergeBufferAttributes(i[c]);if(!E)return null;u.addAttribute(c,E)}for(var c in a){var g=a[c][0].length;if(0===g)break;u.morphAttributes=u.morphAttributes||{},u.morphAttributes[c]=[];for(var f=0;f<g;++f){for(var p=[],y=0;y<a[c].length;++y)p.push(a[c][y][f]);var b=this.mergeBufferAttributes(p);if(!b)return null;u.morphAttributes[c].push(b)}}return u},mergeBufferAttributes:function(r){for(var e,t,o,n=0,i=0;i<r.length;++i){var a=r[i];if(a.isInterleavedBufferAttribute)return null;if(void 0===e&&(e=a.array.constructor),e!==a.array.constructor)return null;if(void 0===t&&(t=a.itemSize),t!==a.itemSize)return null;if(void 0===o&&(o=a.normalized),o!==a.normalized)return null;n+=a.array.length}for(var u=new e(n),s=0,i=0;i<r.length;++i)u.set(r[i].array,s),s+=r[i].array.length;return new THREE.BufferAttribute(u,t,o)}}}]);